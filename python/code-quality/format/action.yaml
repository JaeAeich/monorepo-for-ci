---
name: Format Code
description: Checks and ensures the code is formatted according to the defined
  style guidelines.

inputs:
  os:
    description: The operating system to use
    default: ubuntu-latest
    required: false
  python_version:
    description: Python version to use
    default: '3.12'
    required: false
  poetry_install_options:
    description: Options for installing dependencies via poetry
    required: false
    default: '--only=code_quality --no-root'
  poetry_export_options:
    description: Options for exporting dependencies to check for hash
      changes for cache invalidation
    required: false
    default: '--only=code_quality'

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up environment
      uses: jaeaeich/monorepo-for-ci/python/setup/poetry@main
      id: setup
      continue-on-error: true
      with:
        os: ${{ inputs.os }}
        python_version: ${{ inputs.python_version }}
        poetry_install_options: ${{ inputs.poetry_install_options }}
        poetry_export_options: ${{ inputs.poetry_export_options }}

    - name: Comment on PR
      if: steps.setup.outcome == 'failure'
      uses: jaeaeich/monorepo-for-ci/python/comment@main
      with:
        ci_name: format
        step_name: setup
        commit_id: ${{ github.sha }}
        issue_number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          Check your `pyproject.toml` and the dependency groups in them,
          especially the `code_quality` group.

          <details>
          <summary>Env used for CI</summary>
            OS: ${{ inputs.os }}
            Python Version: ${{ inputs.python_version }}
            Poetry Install Options: ${{ inputs.poetry_install_options }}
            Poetry Export Options: ${{ inputs.poetry_export_options }}
          </details>

    - name: Check code style
      id: format
      continue-on-error: true
      shell: bash
      run: poetry run ruff format --check

    - name: Comment on PR
      if: steps.format.outcome == 'failure'
      uses: jaeaeich/monorepo-for-ci/python/comment@main
      with:
        ci_name: format
        step_name: format
        error_after_comment: false
        commit_id: ${{ github.sha }}
        issue_number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          Code style issues were detected. To resolve them, ensure the 
          environment is set up and dependencies are installed, then run:

          ```bash
          poetry run ruff format
          ```

          This will check and automatically fix some formatting issues.

          <details>
          <summary>**Using the Makefile**</summary>

          The default Makefile from the cookiecutter template includes a 
          `make fl` command for running these checks.

          To view all available commands, run `make` in the project's root 
          directory.
          </details>

    - name: Check for changes
      shell: bash
      run: echo I am checking for changes

    - name: Push changes
      if: steps.format.outcome == 'failure'
      shell: bash
      run: |
        date > generated.txt
        # Note: the following account information will not work on GHES
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "generated"
        git push
