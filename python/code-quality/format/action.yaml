---
name: Format Code
description: Checks and ensures the code is formatted according to the defined style guidelines.

inputs:
  os:
    description: OS to use
    default: "ubuntu-latest"
  python_version:
    description: Python version to use
    default: "3.12"
    required: false
  poetry_install_options:
    description: Options for installing dependencies via poetry
    required: false
    default: "--only=code_quality --no-root"
  poetry_export_options:
    description: Options for exporting dependencies to check for hash 
      changes for cache invalidation
    required: false
    default: "--only=code_quality"
  github_token:
    description: GitHub token for authentication
    required: true

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up environment
      uses: jaeaeich/monorepo-for-ci/python/setup/poetry@main
      id: setup
      with:
        os: ${{ inputs.os }}
        python_version: ${{ inputs.python_version }}
        poetry_install_options: ${{ inputs.poetry_install_options }}
        poetry_export_options: ${{ inputs.poetry_export_options }}
      continue-on-error: true

    - name: Comment if setup fails
      uses: peter-evans/create-or-update-comment@v4
      if: steps.setup.outcome == 'failure'
      with:
        issue-number: ${{ github.event.number }}
        body: "Failed to set up the environment for code formatting. Check your pyproject.toml and the dependency groups in them."

    - name: Stop the workflow if setup fails
      if: steps.setup.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Check code style
      id: main-format
      shell: bash
      run: poetry run ruff format --check
      continue-on-error: true

    - name: Comment if setup fails
      uses: peter-evans/create-or-update-comment@v4
      if: steps.main-format.outcome == 'failure'
      with:
        issue-number: ${{ github.event.number }}
        body: "Failed to set up the environment for code formatting. Try running `make fl` locally to see the errors and fix some which can be fixed automatically."

    - name: Stop the workflow if setup fails
      if: steps.main-format.outcome == 'failure'
      shell: bash
      run: exit 1
...
