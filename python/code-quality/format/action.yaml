---
name: Format Code
description: Checks and ensures the code is formatted according to the defined style guidelines.

inputs:
  os:
    description: OS to use
    default: "ubuntu-latest"
  python_version:
    description: Python version to use
    default: "3.12"
    required: false
  poetry_install_options:
    description: Options for installing dependencies via poetry
    required: false
    default: "--only=code_quality --no-root"
  poetry_export_options:
    description: Options for exporting dependencies to check for hash 
      changes for cache invalidation
    required: false
    default: "--only=code_quality"
  github_token:
    description: GitHub token for authentication
    required: true

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up environment
      uses: jaeaeich/monorepo-for-ci/python/setup/poetry@main
      id: setup
      with:
        os: ${{ inputs.os }}
        python_version: ${{ inputs.python_version }}
        poetry_install_options: ${{ inputs.poetry_install_options }}
        poetry_export_options: ${{ inputs.poetry_export_options }}
      continue-on-error: true

    - name: Comment if setup fails
      uses: jaeaeich/monorepo-for-ci/python/comment@main
      if: steps.setup.outcome == 'failure'
      with:
        ci_name: format
        step_name: setup
        commit_id: ${{ github.sha }}
        issue-number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          Hey $${{ github.actor }}, Failed to set up the environment for code formatting. 
          Check your `pyproject.toml`` and the dependency groups in them.
          
          <details>
          <summary>Default group</summary>
          Note that by default, the `code_quality` group is used for code quality checks.
          if you have manually changed the group, make sure to update the 
          `poetry_install_options` input accordingly in the workflow file.
          </details>

    - name: Stop the workflow if setup fails
      if: steps.setup.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Check code style
      id: main-format
      shell: bash
      run: poetry run ruff format --check
      continue-on-error: true

    - name: Comment if main-format fails
      uses: jaeaeich/monorepo-for-ci/python/comment@main
      if: steps.main-format.outcome == 'failure'
      with:
        ci_name: format
        step_name: main-format
        commit_id: ${{ github.sha }}
        issue-number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          Hey @${{ github.actor }}, The files don't have expected format. 
          Try running `make fl` or `make format-lint` locally to see the errors 
          and fix some which can be fixed automatically.
          
          The above mentioned is the default command, check you make file if there 
          are any changes.
          <details>
          <summary>Makefile</summary>
          ```make
          fl:
            poetry run ruff format --check
          ```
          </details>
...
