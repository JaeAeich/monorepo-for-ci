---
name: Format Code
description: Checks and ensures the code is formatted according to the defined style guidelines.

inputs:
  os:
    description: OS to use
    default: "ubuntu-latest"
  python_version:
    description: Python version to use
    default: "3.12"
    required: false
  poetry_install_options:
    description: Options for installing dependencies via poetry
    required: false
    default: "--only=code_quality --no-root"
  poetry_export_options:
    description: Options for exporting dependencies to check for hash 
      changes for cache invalidation
    required: false
    default: "--only=code_quality"
  github_token:
    description: GitHub token for authentication
    required: true

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up environment
      uses: jaeaeich/monorepo-for-ci/python/setup/poetry@main
      id: setup
      with:
        os: ${{ inputs.os }}
        python_version: ${{ inputs.python_version }}
        poetry_install_options: ${{ inputs.poetry_install_options }}
        poetry_export_options: ${{ inputs.poetry_export_options }}

    - name: Comment if setup fails
      uses: jaeaeich/monorepo-for-ci/python/comment@main
      if: steps.setup.outcome == 'failure'
      with:
        github_token: ${{ inputs.github_token }}
        pull_request_number: ${{ github.event.pull_request.number }}
        message: "Check for your groups in pyproject.toml and ensure they are correct."
        step_name: "setup"
        ci_name: "Code Formatting"
        commit_id: ${{ github.sha }}

    - name: Check code style
      id: main-format
      shell: bash
      run: poetry run ruff format --check
      continue-on-error: true

    - name: Comment if setup fails
      uses: jaeaeich/monorepo-for-ci/python/comment@main
      if: steps.main-format.outcome == 'failure'
      with:
        github_token: ${{ inputs.github_token }}
        pull_request_number: ${{ github.event.pull_request.number }}
        message: "Failed to set up the environment for code formatting. Try running `make fl` locally to check for errors."
        step_name: "main-format"
        ci_name: "Code Formatting"
        commit_id: ${{ github.sha }}
...
