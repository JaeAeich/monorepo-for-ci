---
name: Commenting bot to report CI failures and suggest fixes
description: |
  This action is used to comment on a pull request with the CI failure details
  and suggest fixes to the user. It checks if the comment is already present and
  updates the comment with the latest CI failure details.

inputs:
  ci_name:
    description: The name of the CI
    required: true
  step_name:
    description: The name of the step
    required: true
  commit_id:
    description: The commit id to use
    required: true
  message:
    description: The error message to use
    required: true
  pull_request_number:
    description: The pull request number
    required: true
  slack_invite:
    description: The slack invite link
    required: false
  slack_channel:
    default: "general-dev"
    description: The channel name to redirect to
    required: false
  username:
    description: The username to tag in the message
    default: jaeaeich
    required: false

runs:
  using: composite
  steps:
    - name: Set globals
      id: globals
      shell: bash
      run: |
        echo "SLACK=https://slack.com" >> "${GITHUB_OUTPUT}"
        echo "BODY_INCLUDES=Hi there :sparkles:" >> "${GITHUB_OUTPUT}"
        MESSAGE_BODY="# Helper Bot :robot:\n\n\
        Hi there :sparkles:\n\n\
        I'll try to help and redirect you @${username} to the right documentation and \n\
        quick fixes for CI breaks, so check this message for new updates.\n\
        Explore the below mentioned **Latest** marked collapsibles.\n\n\
        ## Failed CIs\n\n\
        ## Drop a hey! :wave:\n\n\
        Don't hesitate to ask for help in the channel, we are here to assist you.\n\
        [Join community](https://slack.com) if you haven't already and check out\n\
        #${slack_channel} channel for more details on this project."
        echo "MESSAGE_BODY=${MESSAGE_BODY}" >> "${GITHUB_OUTPUT}"
        echo "LATEST_COMMIT_INDICATOR=:star: ${{ inputs.commit_id }}" >> "${GITHUB_OUTPUT}"
        echo "SUMMARY=<summary>:point_right: ${{ inputs.ci_name }} :boom: ${{ inputs.step_name}}</summary>" >> "${GITHUB_OUTPUT}"
        echo "SUMMARY_WITH_INDICATOR=<summary>:star: ${{ inputs.commit_id }} <summary>:point_right: ${{ inputs.ci_name }} :boom: ${{ inputs.step_name}}</summary>" >> "${GITHUB_OUTPUT}"

    - name: Find if comment is already present
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ inputs.pull_request_number }}
        comment-author: 'github-actions[bot]'
        body-includes: "Build output"

    - name: Add comment status to env
      shell: bash
      run: echo "COMMENT_PRESENT=${{ steps.fc.outputs.comment-id != '' }}" >> $GITHUB_ENV

    - name: Create a new comment or update existing comment
      if: steps.globals.outputs.COMMENT_PRESENT == 'false'
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ inputs.pull_request_number }}
        body: ${{ steps.globals.outputs.MESSAGE_BODY }}

    - name: Fill in the template
      if: steps.globals.outputs.COMMENT_PRESENT == 'false'
      shell: bash
      run: |
        FIRST_MESSAGE="
        <details>
          ${{ steps.globals.outputs.SUMMARY_WITH_INDICATOR }}
          ${{ inputs.message }}
        </details>
        "
        UPDATED_TEMPLATE=$(echo "${{ steps.globals.outputs.MESSAGE_BODY }}" | sed "/## Failed CIs/a $FIRST_MESSAGE")
        echo "MESSAGE_BODY=$UPDATED_TEMPLATE" >> $GITHUB_ENV

    - name: Comment with the updated template
      if: steps.globals.outputs.COMMENT_PRESENT == 'false'
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ inputs.pull_request_number }}
        body: ${{ steps.globals.outputs.MESSAGE_BODY }}

    - name: Remove all occurrences of latest indicator from the message for previous fails
      if: steps.globals.outputs.COMMENT_PRESENT == 'true'
      shell: bash
      run: |
        PREV_MESSAGE="${{ steps.fc.outputs.comment-body }}"
        CLEANED_MESSAGE=$(echo "$PREV_MESSAGE" | sed -E "s/${{ steps.globals.outputs.LATEST_COMMIT_INDICATOR }}//g; s/[[:space:]]+/ /g; s/^[[:space:]]+|[[:space:]]+$//g")
        echo "MESSAGE_BODY=$CLEANED_MESSAGE" >> $GITHUB_ENV
    
    - name: Check if the info for failing CI and step is already written
      if: steps.globals.outputs.COMMENT_PRESENT == 'true'
      shell: bash
      run: |
        IS_PRESENT=$(echo "${{ steps.globals.outputs.MESSAGE_BODY }}" | grep -c "${{ inputs.ci_name }}-${{ inputs.step_name }}")
        echo "ALREADY_COMMENTED=$([[ $IS_PRESENT -gt 0 ]] && echo true || echo false)" >> $GITHUB_ENV
    
    - name: If already commented, add latest annotation to summary
      if: steps.globals.outputs.COMMENT_PRESENT == 'true' && steps.globals.outputs.ALREADY_COMMENTED == 'true'
      shell: bash
      run: |
        UPDATED_TEMPLATE=$(echo "${{ steps.globals.outputs.MESSAGE_BODY }}" | sed "s|${{ steps.globals.outputs.SUMMARY }}|${{ steps.globals.outputs.SUMMARY_WITH_INDICATOR }}|g")
        echo "MESSAGE_BODY=$UPDATED_TEMPLATE" >> $GITHUB_ENV

    - name: Update the message with new details
      if: steps.globals.outputs.COMMENT_PRESENT == 'true' && steps.globals.outputs.ALREADY_COMMENTED == 'true'
      shell: bash
      run: |
        NEW_MESSAGE="
        <details>
          ${{ steps.globals.outputs.SUMMARY_WITH_INDICATOR }}
          ${{ inputs.message }}
        </details>
        "
        UPDATED_TEMPLATE=$(echo "${{ steps.globals.outputs.MESSAGE_BODY }}" | sed "/## Failed CIs/a $NEW_MESSAGE")
        echo "MESSAGE_BODY=$UPDATED_TEMPLATE" >> $GITHUB_ENV

    - name: Update the comment with the new message added
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        body: ${{ steps.globals.outputs.MESSAGE_BODY }}
        edit-mode: replace
...